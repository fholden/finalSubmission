satF4
satF3
group_by(satF3,part,sex)
mutate(group_by(satF3,part,sex),)
?mutate
mutate(group_by(satF3,part,sex),total = sum(count),prop= count/total)
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19200102")
ymd("1920/1/2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
hms("03:22:14.5")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment,hours=hour(now()),minutes=minutes(now()),seconds=seconds(now()))
minutes(now())
now()
this_moment <- update(this_moment,hours=10,minutes=16,seconds=0)
this_moment
?now
now("America/New_York")
now(tzone = "America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arraive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("june 17, 2008")
last_time <- mdy("june 17, 2008",tz="Singapore")
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <= new_interval(last_time,arrival)
how_long <- new_interval(last_time,arrival)
how_long <- new_interval(last_time,arrive)
how_long
as.period(how_long)
stopwatch()
how_long
str(how_long)
how_long$tzone
as.period(how_long)
how_long
as.duration(how_long)
hour(as.period(how_long))
new_interval(mdy("march 23,1940"),today())
as.period(new_interval(mdy("march 23,1940"),today()))
year(as.period(new_interval(mdy("march 23,1940"),today())))
month(as.period(new_interval(mdy("march 23,1940"),today())))
?as.period
?interval
install.packages("SQLite")
install.packages("RSQLite")
datasetsDb()
library("RSQLite")
datasetsDB()
datasetsDb()
db <- datasetsDb()
dbListTables(db)
dbReadTable(db, "CO2")
dbGetQuery(db, "Select * from CO2 where conc <100")
dbDisconnect(db)
dbConnect(drv,dbname = "/Users/fholden/timezone")
dbConnect(SQLite(),dbname = "/Users/fholden/timezone")
tmp <-dbConnect(SQLite(),dbname = "/Users/fholden/timezone")
summary(tmp)
dbGetQuery(tmp, "Select count(*) from zone")
dbListTables(tmp)
dbDisconnect(tmp)
dbGetInfo(SQLite())
con <- dbConnect(SQLite())
dbGetInfo(con)
con <- dbConnect(SQLite())
dbGetInfo(con)
dbWriteTable(con,"mtcars",mtcars)
rs <- dbSendQuery(con,"select * from mtcars")
dbGetInfo(rs)
dbFetch(rs,1)
dbGetInfo(rs)
dbClearREsult(rs)
dbClearResult(rs)
dbDisconnect(con)
dbIsValid(SQLite)
dbIsValid(SQLite())
con <- dbConnect(SQLite())
dbIsValid(con)
dbDisconnect(con)
dbIsValid(con)
con <- dbConnect(SQLite(),name = "/Users/fholden/timezones")
con <- dbConnect(SQLite(),dbname = "/Users/fholden/timezones")
isValid(con)
dbIsValid(con)
dbListTables(con)
dbListTables(con)
#execute SQL query
rs <-dbSendQuery(con,"select * from zone")
# check stuff:
dbGetInfo(rs)
dbFetch(rs,1)
dbGetInfo(rs)
dbReadTable(con,"zone")
rs <-dbSendQuery(con,"select * from zone")
# check stuff:
dbGetInfo(rs)
dbFetch(rs,1)
dbListResults(con)
dbClearResults(con)
dbClearResult(con)
dbReadTable(con,"zone")
dbDisconnect(con)
con <- dbConnect(SQLite(),dbname = "/Users/fholden/timezones")
#check the connection:
dbIsValid(con)
#see the tables:
dbListTables(con)
#execute SQL query
rs <-dbSendQuery(con,"select * from zone")
# check stuff:
dbGetInfo(rs)
dbFetch(rs,1)
dbFetch(rs,n=3)
dbHasCompleted(rs)
dbListResults(con)
dbListResults(con)[[1]]
dbListResults(con)[[1]][1]
dbClearResult(con)
dbReadTable(con,"zone")
dbDisconnect(con)
con <- dbConnect(SQLite(),":memory:")
data(USArrests)
dbWriteTable(con,"USArrests",USArrests)
rs <- dbSendQuery(con,"select * from USArrests")
d1 <- fetsy(rs,n=10)  # get first 10 records
d1 <- fetch(rs,n=10)  # get first 10 records
dbHasCompleted(rs)
d2 <- fetch(rs,n = -1)  # get the rest
dbHasCompleted(rs)
dbClearResult(rs)
dbListTables(con)
dbDisconnect(con)
dbWriteTable(con,"USArrests",USArrests)
dbListTables(con)
con <- dbConnect(SQLite(),":memory:")
dbListTables(con)
dbDisconnect(con)
rm(list=ls())
sessionInfo()
library(httr)
#install.packages("httpuv")
library(httpuv)
sessionInfo()
#require(httr)
#require(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
#oauth_endpoints("github")   <- original
fmhApp <- "Quiz2Question1"
oauth_endpoints("github")
#oauth_endpoints(fmhApp)
ClientID <- "2aed53b4714891547ef5"
ClientSecret <- "80a1da7cb19797d6d220ca8e0ff7299d174bae1e"
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
#myapp <- oauth_app(fmhApp, key = ClientID, secret = ClientSecret)
myapp <- oauth_app('github', key = ClientID, secret = ClientSecret)
# 3. Get OAuth credentials
#github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=FALSE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache = FALSE)
github_token
# 4. Use API
gtoken <- config(token = github_token)
gtoken
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
json1 <- content(req)
library("jsonlite")
json2 <- jsonlite::fromJSON(toJSON(json1))
names(json2)
jleek_datasharing <- json2[json2$name=="datasharing",]
jleek_datasharing["created_at"]
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos")
content(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
names(json2)
jleek_datasharing <- json2[json2$name=="datasharing",]
jleek_datasharing["created_at"]
gtoken
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache = FALSE)
github_token
# 4. Use API
gtoken <- config(token = github_token)
gtoken
#req <- GET("https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache = FALSE)
github_token
# 4. Use API
gtoken <- config(token = github_token)
gtoken
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
content(req)
req <- GET("https://api.github.com/users/jtleek/repos")
json1 <- content(req)
library("jsonlite")
json2 <- jsonlite::fromJSON(toJSON(json1))
names(json2)
jleek_datasharing <- json2[json2$name=="datasharing",]
jleek_datasharing["created_at"]
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
print(jleek_datasharing <- json2[json2$name=="datasharing","created_at"])
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
print(jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")])
gtoken  # for debuggin purposes
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
print(paster("\n","\n   The answer to Quesion 1 of Quize 2",jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")])
)
print(paste("\n","\n   The answer to Quesion 1 of Quize 2",jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")]))
print(paste("/n","/n   The answer to Quesion 1 of Quize 2",jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")]))
print(jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")])
print("\n")
print("hello\nworld\n")
print("hello.\nworld.\n")
writeLines("hello.\nworld.\n")
writeLines("hello\nworld.\n")
writeLines("\n\n   The answer to Quesion 1 of Quiz 2:")
print(jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")])
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
rm(list=ls())
library(httr)
#install.packages("httpuv")
library(httpuv)
library(Rcpp)
sessionInfo()
#require(httr)
#require(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
#oauth_endpoints("github")   <- original
fmhApp <- "Quiz2Question1"
oauth_endpoints("github")
#oauth_endpoints(fmhApp)
ClientID <- "2aed53b4714891547ef5"
ClientSecret <- "80a1da7cb19797d6d220ca8e0ff7299d174bae1e"
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
#myapp <- oauth_app(fmhApp, key = ClientID, secret = ClientSecret)
myapp <- oauth_app('github', key = ClientID, secret = ClientSecret)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache = FALSE)
github_token  # for debuggin purposes
# 4. Use API
gtoken <- config(token = github_token)
gtoken  # for debuggin purposes
# the instructions call for the folloing line:
req <- GET("https://api.github.com/rate_limit", gtoken)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos")
content(req)
json1 <- content(req)
library("jsonlite")
json2 <- jsonlite::fromJSON(toJSON(json1))
names(json2)
writeLines("\n\n   The answer to Quesion 1 of Quiz 2:")
print(jleek_datasharing <- json2[json2$name=="datasharing",c("name","created_at")])
jason2
jason1
source('~/coursea/GetCleanData/Quiz2/Quiz2Question1.R')
jason2
json2
names(json2)
library(httr)
# 1. Find OAuth settings for github:
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
1# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
content(req)
names(req)
json1 <- content(req)
library("jsonline")
library("jsonlite")
json2 <- jsonlite::fromJSON9toJSON(json1))
json2 <- jsonlite::fromJSON(toJSON(json1))
names(json2)
setwd("GetCleanData")
if(!file.exists("./week4")){dir.create("./week4")}
fileURL <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?access//type=DOWNLOAD"
download.file(fileURL,destfile ="./week4/cameras.csv",method="curl")
cameraData <- read.csv("./week4/cameras.csv:")
cameraData <- read.csv("./week4/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames.strsplit(names(cameraData),"\\.")
splitNames<- strsplit(names(cameraData),"\\.")
splitNames
myList <- list(letters = c("A","b","c"),niumbers= 1:3,matrix(1:25,ncol = 5))
head(myList)
myList$letters
myList[[1]]
myList[1]
splitNames[[6]][1]
sapply(splitNames,firstElement)
firstElement <- function(x){x[1]}
sapply(splitNames,firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
download.file(fileUrl2,destfile="./data/solutions.csv",method="curl")
reviews <- read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
download.file(fileUrl1,destfile="./week4/reviews.csv",method="curl")
download.file(fileUrl2,destfile="./week4/solutions.csv",method="curl")
reviews <- read.csv("./week4/reviews.csv"); solutions <- read.csv("./week4/solutions.csv")
head(reviews,2)
head(solutions,2)
head(solutions,2)
names(reviews)
sum("_","",names(reviews),)
sub("_","",names(reviews),)
sub("_","",names(reviews))
reviews <- read.csv("./week4/reviews.csv"); solutions <- read.csv("./week4/solutions.csv")
sub("_","",names(reviews))
names(reviews)
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testNames)
gsub("_","",testName)
testName2 <- "this.is...the last....."
sub(".","",testName2)
sub(".","",testName2)
gsub(".","",testName2)
sub("\.","",testName2)
sub(".\.","",testName2)
sub("..","",testName2)
gsub("..","",testName2)
sub("\\.","",testName2)
gsub("\\.","",testName2)
grep("Alamed",cameraData$intersection)
table(grepl("Alameda",cameraData$intersection))
cameraData2 <- cameraData[1grep("Alameda",cameraData$intersection),]
cameraData2 <- cameraData[grepl("Alameda",cameraData$intersection),]
cameraData2
cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection),]
cameraData2
names(cameraData)
grep("Alameda",cameraData$intersection,value=T)
library(stringr)
nchar("Jeffrey Leet")
substr("Jeffrey Leek",1,7)
paste("Jeffrey","Leek")
paste("Jeffrey","Leek",sep="/")
paste0("Jeffrey","Leek")
str_trim("Jeff    ")
rm(list=ls())
curwd <- getwd()
GCDProjectWD <- "/Users/fholden/coursea/GetCleanData/ProjectWork/finalSubmission"
setwd(GCDProjectWD)
# show UCI HAR Dataset
dir()
debug <- FALSE
if (debug) {
# load the test dataset
source("ProjectWork1_loadTest_10rows.R")
source("ProjectWork2_loadTrain_10rows.R")
source("ProjectWork3_Clean.R")
stop("finished debug")}
#
# load the full dataset
rm(list=ls())
source("ProjectWork1_loadTest.R")
source("ProjectWork2_loadTrain.R")
# script 3  Clean up and do work
subDataTBL <- rbind(subTrainTBL,subTestTBL)
GE <- ls()  #get global environment objects
GEtrain <- GE[][grep("*train",GE,ignore.case=T)]
GEtest <- GE[][grep("*test",GE,ignore.case=T)]
# we want to keep :subActivityLables
#trylll
rm(list=GEtrain)
rm(list=GEtest)
#
# try to put the activitylables into the table with an inner join
#
# first correct the names in the two tables
names(subActivityLables) <- c("ActivityID","ActDescription")
niceDataTBL <- inner_join(subDataTBL,subActivityLables,by=c("Activities" = "ActivityID"))
# bread the data set apart into ID columns ds1, Mean columns ds2 STD columns ds3 recolumn bind them
dataIDcols <- select(niceDataTBL,Subjects,ActDescription)
meanCols <- select(niceDataTBL,contains("mean",ignore.case=TRUE))
stdCols <- select(niceDataTBL,contains("std",ignore.case=TRUE))
head(meanCols)
gsub("\\.","",names(meanCols))
names(stdCols)
names(meanCols) <- gsub("\\.","",names(meanCols))
names(stdCols) <- gsub("\\.","",names(stdCols))
#
nicerDataTBL <- cbind(dataIDcols,meanCols,stdCols)
#
#melt the tbl but set up a vector of the Measure.Vars first
measureVars <- names(nicerDataTBL)
measureVars <- measureVars[3:length(measureVars)]
# now melt
if (!any(installed.packages()=="reshape2")) {install.packages("reshape2")}
library(reshape2)
meltedDataTBL <- melt(nicerDataTBL, id=c("Subjects","ActDescription"), measure.vars = measureVars)
#
library(plyr)
ddply(meltedDataTBL,.(ActDescription),summarize,mean(value))
#
# messing around:
table(meltedDataTBL$ActDescription,meltedDataTBL$variable)
byAct <- meltedDataTBL %>% group_by(ActDescription,variable)
byAct %>% summarise_each(funs(mean,sd))
#done with the work
d1 = date
d1
d1 = date()
d1
class(d1)
d2 = Sys.date()
d2
d2 <- Sys.Date()
d2
class(d2)
format9=(d2,"%a %b %d")
format(d2,"%a %b %d")
x <- c("1jan1960","2feb1940","4Oct2914"); z <- as.Date(x,"%d%b%Y"))
z
x <- c("1jan1960","2feb1940","4Oct2914"); z <- as.Date(x,"%d%b%Y")
z
class(z[1])
z1 -z2
z[1] -z[2]
as.numeric(z[1] - z[2])
weekdays(d2)
months(d2)
julian(d2)
ymd("20140423")
library(lubridate)
ymd("20140423")
dmy("03-04-2934")
ymd_hms("20110803 10:15:03")
ymd_hms("20110803 10:15:03", tz="Pacific/Auckland")
wday(d2,label=T)
