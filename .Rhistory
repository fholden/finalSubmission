help(dotplot)
example(dotplot)
require(stats)
Depth <- equal.count(quakes$depth,number=8, overlap = .1)
xsplot(lat ! logn |Depth, data=quakes)
xsplot(lat ! long|Depth, data=quakes)
xsplot(lat ! long|Depth, data=quakes)
xsplot(lat ~ long|Depth, data=quakes)
xyplot(lat ~ long|Depth, data=quakes)
summary(stats)
stats
Depth
summary(quakes)
plot(quakes,lat ~ long)
plot(quakes$lat, quakes$long)
plot(quakes$long, quakes$lat)
help(glm)
search.help("dot")
help.search("dot")
print("Hello dotplot!");
require(stats)
## Tonga Trench Earthquakes
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
summary(stats)
list(stats)
stats
vingnett(all=T)
vignett(all=T)
vignet(all=T)
vignette(all=T)
vignette(all=F)
vignette("affy")
getOption("defaultPackages")
(.packages())
(.packages(all.available=T))
library()
source('~/test-repo/Rwork150404.R')
(.Library)
ls .Library
ls (.Library)
list (.Library)
system("ls -al " +(.Library))
system("ls -al " & (.Library))
ls
ls()
dir()
dir(.Library)
install.packages(installed.packages)
install.packages("installed.packages")
list(1)
u <- list(1)
u
v <- u
v
u[[1]] = "hat"
v
v[[1]]
u
x <- c(1,2,3,5,8)
typof(x)
typeof(x)
class(x)
x[2] <- "hat"
x
typeof(x)
class(x)
x <- 1
1 <- "y"
if (4 > 3)
"bigger" else "smaller"
"<-"
'<-'
`<-`
x <- 1
lapply(as(quote(if (x>y) "orange" else "apple"),"list"),typeof)
y <- list(shoes="loafers", hat="Yankees", shirt="white")
y
y$shoes
y$shrt
y$shirt
x <- 13.2
if(is(x,"numeric") x/2 else "x is not numberic")
if(is(x,"numeric") x/2 else print("x is not numberic")
if (is(x,"numeric") x/2 else print("x is not numberic")
if (is(x,"numeric")) x/2 else print("x is not numberic")
x <- "test"
if (is(x,"numeric")) x/2 else print("x is not numberic")
if (is(x,"numeric")) x/2 else "x is not numberic"
a <- c("a","a","a","a","a")
b <- v("b","b","b","b","b")
b <- c("b","b","b","b","b")
ifelse( c(T,F,T,F,T), a, b)
ifelse( c(F,F,T,F,T), a, b)
print(cube(3))
cube <- function(x, n) {
x^3
}
print(cube(3))
x <- 1:10
if(x >5) { x <- 0}
x <- 1:10
if(x >5) {
print(x)
x <- 0
}
f <- function(x) {
g <- function(y) }
y+z
}
z <- 4
x +g(x)
}
f <- function(x) {
g <- function(y) {
y+z
}
z <- 4
x +g(x)
}
f
f
z <- 10
f
f(3)
z <- 1023
f(3)
x <- 5
y <- if(x<3) {NA} else {10}
y
3L
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(1:10)
f <- 15
h(1:10)
R.version.string
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
getwd()
if.wdexists("./fholden")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = F)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,package)
select(cran, ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, -country:r_arch)
select(cran, -country:-r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:2-
0
-5:20
-5:-20
-(5:20)
select(cran -(X:size))
select(cran, -(X:size))
?filter
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1",country == "US")
?Comparison
filter(cran,country == "IN",r_version <= "3.0.2")
filter(cran,country == "IN" & r_version <= "3.0.2")
filter(cran,country == "IN" | r_version <= "3.0.2")
filter(cran,country == "IN" | country == "US")
filter(cran, size >100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
?arrange
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size / 2^20)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb/2^20)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size + 1000)
sumarize(cran,avg_bytes = mean(size))
summarize(cran,avg_bytes = mean(size))
q()
head(flights)
head(nycflights13)
?nycflights13
??nycflights13
head(dplyr::copy_nycflights13)
library(nycflights13)
library(dplyr::copy_nycflights13)
dir()
setwd("coursea")
dir()
dir("nycflights13-master")
source("nycflights13-master/nycflights.Rproj"")
)
)
////
""
source()
q()
swirl()
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count)
res <- gather(students2,sex_class,count,-grade)
res
?separate()
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
?gather
gather(students3,class,grade,-name,-test)
gather(students3,class,grade,-name,-test,ba.rm=TRUE)
gather(students3,class,grade,-name,-test,na.rm=TRUE)
students3 %>%
gather( class,grade ,-(name:test),na.rm = TRUE)
submit()
?spread
students4 <- gather(students3,class,grade,class1:lass5,na.rm = TRUE)
students4 <- gather(students3,class,grade,class1:class5,na.rm = TRUE)
students4
spread(students4,class,classno)
spread(students4,class,classNo)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
spread(stocksm,stock,price)
spread(students4,class,grade)
spread(students4,grade,class)
spread(students4,grade,class)
submit()
spread(students4,grade,test)
spread(students4,test,grade)
submit()
extract_numeric("class5")
submit()
stu5 <- spread(students4,grade,test)
stu5 <- spread(students4,test,grade)
stu5
mutate(stu5,classNo=extract_numeric(class))
mutate(stu5,class=extract_numeric(class))
submit()
submit()
submit()
students4
q()
rm(list=ls())
library(swirl)
swirl()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
bind_rows(passed,failed)
sat
select(-contains("total"))
select(sat, -contains("total"))
gather((select(sat,-contains("total"))),part_sex,count,-score_range)
separate(gather((select(sat,-contains("total"))),part_sex,count,-score_range),part_sex,part,sex)
separate(gather((select(sat,-contains("total"))),part_sex,count,-score_range),part_sex,part:sex)
?separate
separate(gather((select(sat,-contains("total"))),part_sex,count,-score_range),part_sex,c("part","sex"))
submit()
satF1 <-select(sat,-contains("total"))
satF2 <-  gather(satF1,part_sex,count,-score_range)
satF3 <- separate(satF2,part_sex,c("part","sex"))
satF3
submit()
satF4
satF3
group_by(satF3,part,sex)
mutate(group_by(satF3,part,sex),)
?mutate
mutate(group_by(satF3,part,sex),total = sum(count),prop= count/total)
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19200102")
ymd("1920/1/2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
hms("03:22:14.5")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment,hours=hour(now()),minutes=minutes(now()),seconds=seconds(now()))
minutes(now())
now()
this_moment <- update(this_moment,hours=10,minutes=16,seconds=0)
this_moment
?now
now("America/New_York")
now(tzone = "America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arraive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("june 17, 2008")
last_time <- mdy("june 17, 2008",tz="Singapore")
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <= new_interval(last_time,arrival)
how_long <- new_interval(last_time,arrival)
how_long <- new_interval(last_time,arrive)
how_long
as.period(how_long)
stopwatch()
how_long
str(how_long)
how_long$tzone
as.period(how_long)
how_long
as.duration(how_long)
hour(as.period(how_long))
new_interval(mdy("march 23,1940"),today())
as.period(new_interval(mdy("march 23,1940"),today()))
year(as.period(new_interval(mdy("march 23,1940"),today())))
month(as.period(new_interval(mdy("march 23,1940"),today())))
?as.period
?interval
install.packages("SQLite")
install.packages("RSQLite")
datasetsDb()
library("RSQLite")
datasetsDB()
datasetsDb()
db <- datasetsDb()
dbListTables(db)
dbReadTable(db, "CO2")
dbGetQuery(db, "Select * from CO2 where conc <100")
dbDisconnect(db)
dbConnect(drv,dbname = "/Users/fholden/timezone")
dbConnect(SQLite(),dbname = "/Users/fholden/timezone")
tmp <-dbConnect(SQLite(),dbname = "/Users/fholden/timezone")
summary(tmp)
dbGetQuery(tmp, "Select count(*) from zone")
dbListTables(tmp)
dbDisconnect(tmp)
dbGetInfo(SQLite())
con <- dbConnect(SQLite())
dbGetInfo(con)
con <- dbConnect(SQLite())
dbGetInfo(con)
dbWriteTable(con,"mtcars",mtcars)
rs <- dbSendQuery(con,"select * from mtcars")
dbGetInfo(rs)
dbFetch(rs,1)
dbGetInfo(rs)
dbClearREsult(rs)
dbClearResult(rs)
dbDisconnect(con)
dbIsValid(SQLite)
dbIsValid(SQLite())
con <- dbConnect(SQLite())
dbIsValid(con)
dbDisconnect(con)
dbIsValid(con)
con <- dbConnect(SQLite(),name = "/Users/fholden/timezones")
con <- dbConnect(SQLite(),dbname = "/Users/fholden/timezones")
isValid(con)
dbIsValid(con)
dbListTables(con)
dbListTables(con)
#execute SQL query
rs <-dbSendQuery(con,"select * from zone")
# check stuff:
dbGetInfo(rs)
dbFetch(rs,1)
dbGetInfo(rs)
dbReadTable(con,"zone")
rs <-dbSendQuery(con,"select * from zone")
# check stuff:
dbGetInfo(rs)
dbFetch(rs,1)
dbListResults(con)
dbClearResults(con)
dbClearResult(con)
dbReadTable(con,"zone")
dbDisconnect(con)
con <- dbConnect(SQLite(),dbname = "/Users/fholden/timezones")
#check the connection:
dbIsValid(con)
#see the tables:
dbListTables(con)
#execute SQL query
rs <-dbSendQuery(con,"select * from zone")
# check stuff:
dbGetInfo(rs)
dbFetch(rs,1)
dbFetch(rs,n=3)
dbHasCompleted(rs)
dbListResults(con)
dbListResults(con)[[1]]
dbListResults(con)[[1]][1]
dbClearResult(con)
dbReadTable(con,"zone")
dbDisconnect(con)
con <- dbConnect(SQLite(),":memory:")
data(USArrests)
dbWriteTable(con,"USArrests",USArrests)
rs <- dbSendQuery(con,"select * from USArrests")
d1 <- fetsy(rs,n=10)  # get first 10 records
d1 <- fetch(rs,n=10)  # get first 10 records
dbHasCompleted(rs)
d2 <- fetch(rs,n = -1)  # get the rest
dbHasCompleted(rs)
dbClearResult(rs)
dbListTables(con)
dbDisconnect(con)
dbWriteTable(con,"USArrests",USArrests)
dbListTables(con)
con <- dbConnect(SQLite(),":memory:")
dbListTables(con)
dbDisconnect(con)
?write.table
rm(list=ls())
curwd <- getwd()
GCDProjectWD <- "/Users/fholden/coursea/GetCleanData/ProjectWork/finalSubmission"
setwd(GCDProjectWD)
# show UCI HAR Dataset
dir()
debug <- FALSE
if (debug) {
# load the test dataset
source("ProjectWork1_loadTest_10rows.R")
source("ProjectWork2_loadTrain_10rows.R")
source("ProjectWork3_Clean.R")
stop("finished debug")}
#
# load the full dataset
rm(list=ls())
source("ProjectWork1_loadTest.R")
source("ProjectWork2_loadTrain.R")
source("ProjectWork3_Clean.R")
write.csv(meltedDataTBL,"./tidyGCDProjectDataSet.csv",row.names=FALSE)
write.table(meltedDataTBL,"./tidyGCDProjectDataset.txt",row.names=FALSE)
stop("finished")
